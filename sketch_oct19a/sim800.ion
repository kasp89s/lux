#include <SoftwareSerial.h>
SoftwareSerial SIM800(8, 9);
SoftwareSerial GPS(3, 4);

const char *umcConfig[]  = {"wap", "","", "192.168.010.010"};
const char *kievstarConfig[]  = {"www.kyivstar.net", "igprs", "internet", ""};

bool modemReady = 0, // Готов ли модем
     enableEcho = 1; 

String _response = "",
       OPERATOR = "",
       IMEI; // Переменная для хранения ответа модуля

unsigned int taktPerSec = 60000;

int batteryPower = 0,
    network = 0;

// Эта хуйня делает 60000 цыклов в секунду
long ticCounter = 0,
     updateBatteryCounter = 0,
     checkGPSCounter = 0;

void updateCounters()
{
   ticCounter++;
   updateBatteryCounter++;
   checkGPSCounter++;
   
    // раз в 10 секунд обновляем данные про батарею
    if (updateBatteryCounter >= 2600000) {
       updateBatteryCounter = 0;
       updateBatteryPower();
       updateNetwork();
       //sendATCommand("AT+CUSD=1,\"*101#\"", true);
    }

    // раз в 30 секунд проверяем данные GPS
    if (checkGPSCounter >= 1800000) {
       Serial.println("GPS Working...");
       checkGPSCounter = 0;
       gpsListener();
    }
}

// Инициализация интернета
void initInternet()
{
  char *configData[] = {"wap", "","", "192.168.010.010"};
  String apn = configData[0],
         username = configData[1],
         password = configData[2],
         ip = configData[3];
  //if (OPERATOR == "UMC")
  //Serial.println(configData[0]);
  // Full mode
  //sendATCommand("AT+CFUN=1", true);

  //sendATCommand("AT+CSTT=\"" + apn + "\",\"\",\"\"\r\n", true);

  //sendATCommand("AT+CIICR", true);
  sendATCommand("AT+SAPBR=3,1,Contype,GPRS", true);
  sendATCommand("AT+SAPBR=3,1,\"APN\",\"" + apn + "\"", true);
  sendATCommand("AT+SAPBR=3,1,\"USER\",\"" + username + "\"", true);
  sendATCommand("AT+SAPBR=3,1,\"PWD\",\"" + password + "\"", true);
  delay(10000);
  sendATCommand("AT+SAPBR=1,1", true);
  delay(10000);
  sendATCommand("AT+SAPBR=2,1", true);
  delay(10000);
  sendATCommand("AT+HTTPINIT", true);

  /*
  // Set credentials (TODO username and password are not configurable from variables). This may work without CSTT and CIICR but sometimes it caused error without them even though APN is given by SAPBR 
  sim_ss.write("AT+CSTT=\"");
  sim_ss.print(apn);
  sim_ss.write("\",\"\",\"\"\r\n");
  waitUntilResponse("OK");
  blinkLed(SimConnectionPin);
  
  // Connect and get IP
  sim_ss.println("AT+CIICR");
  waitUntilResponse("OK");
  blinkLed(SimConnectionPin);
  
  // Some more credentials
  sim_ss.write("AT+SAPBR=3,1,\"APN\",\"");
  sim_ss.print(apn);
  sim_ss.write("\"\r\n");
  waitUntilResponse("OK");
  blinkLed(SimConnectionPin);
  
  sim_ss.println("AT+SAPBR=3,1,\"USER\",\"\"");
  waitUntilResponse("OK");
  blinkLed(SimConnectionPin);
  
  sim_ss.println("AT+SAPBR=3,1,\"PWD\",\"\"");
  waitUntilResponse("OK");
  blinkLed(SimConnectionPin);
  
  sim_ss.println("AT+SAPBR=1,1");
  waitUntilResponse("OK");
  blinkLed(SimConnectionPin);
  
  sim_ss.println("AT+HTTPINIT");
  waitUntilResponse("OK");
  digitalWrite(SimConnectionPin, HIGH);
  */
}

void setup() {
  pinMode(2, OUTPUT);
  digitalWrite(2, HIGH);
  delay(5000); // Ждем запуска симки
  Serial.begin(9600);
  SIM800.begin(9600);
  GPS.begin(9600);
  SIM800.listen();
  sendATCommand("AT", true);
  sendATCommand("ATE0", true);
  IMEI = sendATCommand("AT+GSN", true);
  updateBatteryPower();
}

void loop() {
//  if (GPS.available()){
//     Serial.println(GPS.readString());
//  }

  if (SIM800.available()){
     simRxListener(SIM800.readString());
  }
  if (modemReady) {
    updateCounters();
    
//    Serial.println("Start Main Cicle");
    //Когда симка полностью готова!
    //sendATCommand("ATD+380500222622;", true);
    //delay(10000);
    //sendATCommand("ATH", true);
//    delay(60000);
  } else {
//    updateNetwork();
//    Serial.println(network);
//    delay(1000);
  }
}

// Работа с GPS
void gpsListener()
{
   GPS.listen();

  // Секунду слушаем GPS
  for (unsigned long start = millis(); millis() - start < 1000;)
  {
    while (GPS.available())
    {
      Serial.write(GPS.read());
    }
  }

  SIM800.listen();
}

// Слушает чо говорит симка и чето потом делает...
void simRxListener(String response)
{
  response.trim();

  Serial.println(ticCounter);
  Serial.print("Modem response => [");
  Serial.print(response);
  Serial.println("]");

  if (response == "SMS Ready") {
        updateOperator();
        initInternet();
        modemReady = 1;
  }
  if (response == "RING")
  {
    sendATCommand("ATH", true);
  }

  if (response.lastIndexOf("CUSD")) {
     // Обрабатуем ответ с балансом...
  }
}

String sendATCommand(String cmd, bool waiting) {
  String _resp = "";                            // Переменная для хранения результата
  if (enableEcho)
    Serial.println(cmd);                          // Дублируем команду в монитор порта

  SIM800.println(cmd);                          // Отправляем команду модулю
  if (waiting) {                                // Если необходимо дождаться ответа...
    _resp = waitResponse();                     // ... ждем, когда будет передан ответ
    // Если Echo Mode выключен (ATE0), то эти 3 строки можно закомментировать
    if (_resp.startsWith(cmd)) {  // Убираем из ответа дублирующуюся команду
      _resp = _resp.substring(_resp.indexOf("\r", cmd.length()) + 2);
    }

     if (enableEcho)
        Serial.println(_resp);                      // Дублируем ответ в монитор порта

    _resp.replace("OK", "");
  }
  _resp.trim();
  return _resp;                                 // Возвращаем результат. Пусто, если проблема
}

String waitResponse() {                         // Функция ожидания ответа и возврата полученного результата
  String _resp = "";                            // Переменная для хранения результата
  long _timeout = millis() + 60000;             // Переменная для отслеживания таймаута (10 секунд)
  while (!SIM800.available() && millis() < _timeout)  {}; // Ждем ответа 10 секунд, если пришел ответ или наступил таймаут, то...
  if (SIM800.available()) {                     // Если есть, что считывать...
    _resp = SIM800.readString();                // ... считываем и запоминаем
  }
  else {                                        // Если пришел таймаут, то...
    Serial.println("Timeout...");               // ... оповещаем об этом и...
  }
  return _resp;                                 // ... возвращаем результат. Пусто, если проблема
}

// Обновляет значения уровня сети.
void updateOperator()
{
    OPERATOR =  getValue(sendATCommand("AT+COPS?", true), ',', 2);
    OPERATOR.replace("\"", "");
}

// Обновляет значения уровня сети.
void updateNetwork()
{
    network = getValue(sendATCommand("AT+CSQ", true), ': ', 1).toInt();
}

// Обновляет значение вольтажа батареи
void updateBatteryPower()
{
    batteryPower = getValue(sendATCommand("AT+CBC", true), ',', 2).toInt();
}

// Вытаскивает значение со строки по разделителю.
String getValue(String data, char separator, int index)
{
    int found = 0;
    int strIndex[] = { 0, -1 };
    int maxIndex = data.length() - 1;

    for (int i = 0; i <= maxIndex && found <= index; i++) {
        if (data.charAt(i) == separator || i == maxIndex) {
            found++;
            strIndex[0] = strIndex[1] + 1;
            strIndex[1] = (i == maxIndex) ? i+1 : i;
        }
    }
    return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}
