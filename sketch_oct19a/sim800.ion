#include <AltSoftSerial.h>
#include <SoftwareSerial.h>
SoftwareSerial SIM800(5, 6);
AltSoftSerial GPS;

bool modemReady = 0, // Готов ли модем
     enableEcho = 1; 

String _response = "",
       OPERATOR = "",
       IMEI; // Переменная для хранения ответа модуля

unsigned int taktPerSec = 60000;

int batteryPower = 0,
    network = 0;

// Эта хуйня делает 60000 цыклов в секунду
long ticCounter = 0,
     updateBatteryCounter = 0;

void updateCounters()
{
   ticCounter++;
   updateBatteryCounter++;

    // раз в 10 секунд обновляем данные про батарею
    if (updateBatteryCounter >= 600000) {
       updateBatteryCounter = 0;
       updateBatteryPower();
    }
}

void setup() {
  pinMode(2, OUTPUT);
  digitalWrite(2, HIGH);
  delay(5000); // Ждем запуска симки
  Serial.begin(9600);
  SIM800.begin(9600);
  sendATCommand("AT", true);
  sendATCommand("ATE0", true);
  IMEI = sendATCommand("AT+GSN", true);
  updateBatteryPower();
}

void loop() {
  if (SIM800.available()){
     simRxListener(SIM800.readString());
  }
  if (modemReady) {
    updateCounters();
    
//    Serial.println("Start Main Cicle");
    //Когда симка полностью готова!
    //sendATCommand("ATD+380500222622;", true);
    //delay(10000);
    //sendATCommand("ATH", true);
//    delay(60000);
  } else {
//    updateNetwork();
//    Serial.println(network);
//    delay(1000);
  }

  //SIM800.println("ATD+380500222622;");
  //delay(10000);
  //SIM800.println("ATH");
  //delay(600000);
  // Определяем заряд батареи.
}

// Слушает чо говорит симка и чето потом делает...
void simRxListener(String response)
{
  response.trim();

  if (response == "Call Ready") {
        updateOperator();
        Serial.println(OPERATOR);
        modemReady = 1;
  }
  if (response == "RING")
  {
    sendATCommand("ATH", true);
  }

  Serial.println(ticCounter);
  Serial.print("Modem response => [");
  Serial.print(response);
  Serial.println("]");
}

String sendATCommand(String cmd, bool waiting) {
  String _resp = "";                            // Переменная для хранения результата
  if (enableEcho)
    Serial.println(cmd);                          // Дублируем команду в монитор порта

  SIM800.println(cmd);                          // Отправляем команду модулю
  if (waiting) {                                // Если необходимо дождаться ответа...
    _resp = waitResponse();                     // ... ждем, когда будет передан ответ
    // Если Echo Mode выключен (ATE0), то эти 3 строки можно закомментировать
    if (_resp.startsWith(cmd)) {  // Убираем из ответа дублирующуюся команду
      _resp = _resp.substring(_resp.indexOf("\r", cmd.length()) + 2);
    }

     if (enableEcho)
        Serial.println(_resp);                      // Дублируем ответ в монитор порта

    _resp.replace("OK", "");
  }
  _resp.trim();
  return _resp;                                 // Возвращаем результат. Пусто, если проблема
}

String waitResponse() {                         // Функция ожидания ответа и возврата полученного результата
  String _resp = "";                            // Переменная для хранения результата
  long _timeout = millis() + 10000;             // Переменная для отслеживания таймаута (10 секунд)
  while (!SIM800.available() && millis() < _timeout)  {}; // Ждем ответа 10 секунд, если пришел ответ или наступил таймаут, то...
  if (SIM800.available()) {                     // Если есть, что считывать...
    _resp = SIM800.readString();                // ... считываем и запоминаем
  }
  else {                                        // Если пришел таймаут, то...
    Serial.println("Timeout...");               // ... оповещаем об этом и...
  }
  return _resp;                                 // ... возвращаем результат. Пусто, если проблема
}

// Обновляет значения уровня сети.
void updateOperator()
{
    OPERATOR =  getValue(sendATCommand("AT+COPS?", true), ',', 2);
    OPERATOR.replace("\"", "");
}

// Обновляет значения уровня сети.
void updateNetwork()
{
    network = getValue(sendATCommand("AT+CSQ", true), ': ', 1).toInt();
}

// Обновляет значение вольтажа батареи
void updateBatteryPower()
{
    batteryPower = getValue(sendATCommand("AT+CBC", true), ',', 2).toInt();
}

// Вытаскивает значение со строки по разделителю.
String getValue(String data, char separator, int index)
{
    int found = 0;
    int strIndex[] = { 0, -1 };
    int maxIndex = data.length() - 1;

    for (int i = 0; i <= maxIndex && found <= index; i++) {
        if (data.charAt(i) == separator || i == maxIndex) {
            found++;
            strIndex[0] = strIndex[1] + 1;
            strIndex[1] = (i == maxIndex) ? i+1 : i;
        }
    }
    return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}
